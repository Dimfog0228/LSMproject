//#include <iostream>
//
//int main(void)
//{
//	//해당 코드는 초기화 리스트를 사용하지 않고 포함된 클래스를 초기화 시키는 방법입니다. 그러나 권장되지 않는 이유가 있습니다.
//}
//
//class two {
//public:
//	two() {
//
//	};
//	two(int size) {
//		int x = size;
//		int lsm(size);
//	};
//
//};
////two::two(int size) {};
//
//class one {
//public:
//	one(int size);
//private:
//	int size = 3;
//	two data = two(10);//객체를 만들 때 생성자를 호출함. data라는 객체를 만들고 그곳에 two(10)을 대입하겠다는 의미. 여기서는 data의 기본생성자로 초기화되고
//						//다시 two(int size)로 초기화 된다.(2번의 초기화)
//	//two data(10); -> 클래스에서 생성자를 직접 호출하는 것은 허용되지 않는다. 객체를 만들 때 호출해야한다.(객체 없는 생성자 호출 자체가 불가능)
//	//객체를 만들 때 생성자가 자동으로 호출되므로, 클래스 내에서 다시 호출할 필요가 없다.
//};
//
//one::one(int size) { //오버로딩 
//	data = two(size);
//}
////
//////효율성: 멤버 변수 data는 먼저 디폴트 생성자로 초기화되고, 그 다음에 대입 연산자를 통해 two(size) 생성자로 초기화됩니다. 이것은 두 단계의 초기화 과정을 거칩니다. 초기화 리스트를 사용하면 직접 생성자를 호출하므로 초기화 과정이 불필요하게 두 번 발생하지 않습니다.
// ////디폴트 생성자 호출 : two 클래스에 디폴트 생성자와 매개변수를 받는 생성자 두 가지가 정의되어 있습니다.멤버 변수 data는 먼저 디폴트 생성자로 초기화되고, 그런 다음 대입 연산자를 통해 다른 생성자로 초기화됩니다.디폴트 생성자가 필요하지 않은 경우에도 호출됩니다.
//
//////복잡성 : 초기화 리스트를 사용하면 코드가 더 간결하고 읽기 쉽습니다.대입 연산자를 사용하는 경우 초기화 프로세스가 클래스 밖으로 나가기 때문에 클래스 정의와 초기화가 분리되어 코드를 이해하기 어려워질 수 있습니다.
//////
//////따라서 C++에서는 가능한 한 초기화 리스트를 사용하여 클래스의 멤버 변수를 초기화하는 것이 권장됩니다.초기화 리스트는 성능 및 코드 가독성 면에서 이점을 제공하며, 위의 코드에서 one 클래스의 생성자를 다음과 같이 수정할 수 있습니다 :